version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi


workflows:
  default:
    jobs:
      # All Need to run on the test deployment branch to verify the code
      - build-frontend:
          context:
          - slack-secrets
          - slack-templates

      - build-backend:
          context:
          - slack-secrets
          - slack-templates

      - test-frontend:
          requires: [build-frontend]


      - test-backend:
          requires: [build-backend]

      - scan-backend:
          requires: [build-backend]

      # All need to run on the Master branch 
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]

      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]          
      # - run-migrations:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]
      # - deploy-frontend:
      #     requires: [run-migrations]
      #     filters:
      #       branches:
      #         only: [master]
      # - deploy-backend:
      #     requires: [run-migrations]
      #     filters:
      #       branches:
      #         only: [master]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      #     filters:
      #       branches:
      #         only: [master]          
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     filters:
      #       branches:
      #         only: [master]
      # - cleanup:
      #     requires: [cloudfront-update]
      #     filters:
      #       branches:
      #         only: [master]

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
          context: slack-secrets

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: build-alerts
          event: pass
          template: PASS_TEMPLATE
      - slack/notify:
          channel: build-alerts
          event: fail
          template: FAIL_TEMPLATE   

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          context: slack-secrets

      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
            ls 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            ls frontend
            cd frontend
            npm install
            npm run test    
                       
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build-test
          command: |
            ls backend
            cd backend
            npm install
            npm run test    

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-build-test
          command: |
            ls frontend
            cd frontend
            npm audit fix --audit-level=critical --force   

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build-test
          command: |
            ls backend
            cd backend
            npm audit fix --audit-level=critical --force   

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: yum -y install tar gzip
      - run:
          name: Deploying the backend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --tags Name="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            URLS=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
            echo URLS : $URLS
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            curl -H "Content-Type: text/plain" -H "token: 6c2a03b1-da6f-4d00-9bd9-e69940273f99"  --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}	
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploying the front end Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --tags Name="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          # Writes out the IP into an inventory file to use for Ansible Configuration
          name: Add back-end ip to ansible inventory
          command: |
            echo $URLS >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
            - backend/            
    
      # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["91:3e:d9:88:7b:88:c5:59:13:36:b5:27:50:3b:f8:21"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |  
            echo ENVIRONMENT=production > “backend/.env”
            echo TYPEORM_CONNECTION=postgres >> “backend/.env”
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> “backend/.env”
            echo TYPEORM_HOST=$TYPEORM_HOST >> “backend/.env”
            echo TYPEORM_PORT=5532 >> “backend/.env”
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> “backend/.env”
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> “backend/.env”
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> “backend/.env
            cat “backend/.env”
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

