version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi


workflows:
  default:
    jobs:
      # All Need to run on the test deployment branch to verify the code
      - build-frontend:
          context:
          - slack-secrets
          - slack-templates

      - build-backend:
          context:
          - slack-secrets
          - slack-templates

      - test-frontend:
          requires: [build-frontend]


      - test-backend:
          requires: [build-backend]

      - scan-backend:
          requires: [build-backend]

      # All need to run on the Master branch 
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]

      - configure-infrastructure:
          requires: [deploy-infrastructure]
         
      - run-migrations:
          requires: [configure-infrastructure]
  
      - deploy-frontend:
          requires: [run-migrations]

      - deploy-backend:
          requires: [run-migrations]
  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
       
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     filters:
      #       branches:
      #         only: [master]
      # - cleanup:
      #     requires: [cloudfront-update]
      #     filters:
      #       branches:
      #         only: [master]

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
          context: slack-secrets

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: build-alerts
          event: pass
          template: PASS_TEMPLATE
      - slack/notify:
          channel: build-alerts
          event: fail
          template: FAIL_TEMPLATE   

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          context: slack-secrets

      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
            ls 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            ls frontend
            cd frontend
            npm install
            npm run test    
                       
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build-test
          command: |
            ls backend
            cd backend
            npm install
            npm run test    

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-build-test
          command: |
            ls frontend
            cd frontend
            npm audit fix --audit-level=critical --force   

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build-test
          command: |
            ls backend
            cd backend
            npm audit fix --audit-level=critical --force   

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: yum -y install tar gzip
      - run:
          name: Deploying the backend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --tags Name="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            pwd
            export BACKEND_IP=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
            echo BACKEND_IP : $BACKEND_IP
            echo CIRCLE CI RUN : ${CIRCLE_WORKFLOW_ID:0:7}
            echo Memstash URL : https://api.memstash.io/values/backend_ip_${CIRCLE_WORKFLOW_ID:0:7}
            curl -H "Content-Type: text/plain" -H "token: sjgt270867"  --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/backend_ip_${CIRCLE_WORKFLOW_ID:0:7}	
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploying the front end Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --tags Name="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          # Writes out the IP into an inventory file to use for Ansible Configuration
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - backend/            
    
      # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["91:3e:d9:88:7b:88:c5:59:13:36:b5:27:50:3b:f8:21"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            pwd
            ls
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible tar gzip ansible nodejs npm curl
              pip install awscli
      - run:
          name: run and save migration 
          working_directory: ./backend
          command: |
            echo "BUILDING THE BACKEND ENVIRONMENT FILE FOR POSTGRES MIGRATIONS"
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env

            ls -latr
            cat .env

            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i > npminstall.log

            echo "INSTALLING OATH-SIGN PACKAGE"
            npm install oauth-sign >> npminstall.log
            
            echo "HOST: " $TYPEORM_HOST
            echo "PWD: " $(pwd)
            echo $TYPEORM_DATABASE
            
            echo "RUNNING POSTGRES DATABASE MIGRATIONS"
            npm run migrations > migration.log

            MIGRATION_LOG=/root/project/backend/migration.log
            if test -f "$MIGRATION_LOG"; then
                echo "$MIGRATION_LOG exists."
            fi

      - run:  
          name: Send results to memstash
          working_directory: ./backend
          command: |
              
              ## Check current working DIR and check contents

              MIGRATION_LOG=/root/project/backend/migration.log
              if test -f "$MIGRATION_LOG"; then
                  echo "$MIGRATION_LOG exists."
              fi

              if [[ $(grep -i "has been executed successfully" $MIGRATION_LOG) ]]; then
                echo "SUCCESSFULLY EXECUTED THE DATABASE MIGRATIONS"
                echo "Writing out to memstash : https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}"
                curl -H "Content-Type: text/plain" -H "token: sjgt270867" --request PUT \
                  --data "Migration successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              else
                echo "FAILED TO RUN THE DATABASE MIGRATIONS"
                cat $MIGRATION_LOG
                echo "Writing out to memstash : https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}"
                curl -H "Content-Type: text/plain" -H "token: sjgt270867" --request PUT \
                  --data "Migration failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                exit 1
              fi

      # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible tar gzip ansible nodejs npm curl
              pip install awscli
      - run:
          name: Get backend EC2 url
          command: |
            #Memstash to pull out backend ip
            echo "URL to call on for IP : https://api.memstash.io/values/backend_ip_${CIRCLE_WORKFLOW_ID:0:7}"
            export BACKEND_IP=$(curl -H "token: sjgt270867" --request GET https://api.memstash.io/values/backend_ip_${CIRCLE_WORKFLOW_ID:0:7})
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "${API_URL}" > apiurl.txt
      - run:
          name: Deploy frontend objects
          command: |
            pwd
            cd frontend
            export API_URL=$(cat apiurl.txt)
            npm install
            npm run build
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - add_ssh_keys:
            fingerprints: ["91:3e:d9:88:7b:88:c5:59:13:36:b5:27:50:3b:f8:21"] 
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible tar gzip ansible nodejs npm curl
              pip install awscli
        - run:
            name: Deploy backend
            command: |
              echo "My current workspace is : $(pwd)" 
              ls -la
              echo "BUILDING THE BACKEND ENVIRONMENT FILE"
              echo ENVIROMENT=production > backend/.env
              echo TYPEORM_CONNECTION=postgres >> backend/.env
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
              echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
              echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env

              cat backend/.env
              cat .circleci/ansible/inventory.txt
              tar -cvf backend.tar backend
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

        # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

    smoke-test:
        docker:
          - image: python:3.7-alpine3.11
        steps:
          - checkout
          - attach_workspace:
              at: ~/
          - run:
              name: Install dependencies
              command: |
                apk add --update curl nodejs npm
                pip install awscli
          - run:
              name: Frontend smoke test.
              command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.website.eu-west-1.amazonaws.com/test/donkey"            
                if curl -s ${URL} | grep "Welcome"
                then
                  return 1
                else
                  return 0
                fi
          - run:
              name: backend url / smoke test backend
              command: |
                BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
                curl "http://${BACKEND_IP}:3030/api/status"
                
      # On deployment Failure the destroy enviroment commands will be ran to tear down the stacks
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

